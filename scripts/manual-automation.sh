#!/bin/bash

# Manual PR Automation Script
# Usage: ./manual-automation.sh <PR_NUMBER>

set -e

if [ $# -eq 0 ]; then
    echo "‚ùå Error: Please provide a PR number"
    echo "Usage: $0 <PR_NUMBER>"
    echo "Example: $0 123"
    exit 1
fi

PR_NUMBER=$1

echo "üîß Running manual automation for PR #$PR_NUMBER..."

# Check if gh CLI is available
if ! command -v gh &> /dev/null; then
    echo "‚ùå Error: GitHub CLI (gh) is not installed"
    echo "Please install it from: https://cli.github.com/"
    exit 1
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Error: Not in a git repository"
    exit 1
fi

# Get repository info
REPO_OWNER=$(gh repo view --json owner --jq .owner.login)
REPO_NAME=$(gh repo view --json name --jq .name)

echo "üìç Repository: $REPO_OWNER/$REPO_NAME"
echo "üéØ PR Number: #$PR_NUMBER"

# Get PR information
echo "üìù Getting PR information..."
PR_INFO=$(gh pr view $PR_NUMBER --json title,author,body,files)
PR_TITLE=$(echo "$PR_INFO" | jq -r .title)
PR_AUTHOR=$(echo "$PR_INFO" | jq -r .author.login)
PR_BODY=$(echo "$PR_INFO" | jq -r .body // "")

echo "   Title: $PR_TITLE"
echo "   Author: $PR_AUTHOR"

# Get changed files
FILES=$(echo "$PR_INFO" | jq -r '.files[].path' | tr '\n' ' ')
echo "   Files: $FILES"

# Determine labels to add
LABELS_TO_ADD="hacktoberfest"

# Add current year label if in October
CURRENT_MONTH=$(date +%m)
CURRENT_YEAR=$(date +%Y)
if [ "$CURRENT_MONTH" -eq 10 ]; then
    LABELS_TO_ADD="$LABELS_TO_ADD,hacktoberfest_$CURRENT_YEAR"
fi

# Category detection based on file paths
if echo "$FILES" | grep -q "1_introductory\|introductory"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,category: introductory,good first issue"
elif echo "$FILES" | grep -q "2_sorting_searching\|sorting\|searching"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,category: sorting-searching"
elif echo "$FILES" | grep -q "3_dp\|dynamic"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,category: dp"
elif echo "$FILES" | grep -q "5_range_queries\|range"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,category: range-queries"
elif echo "$FILES" | grep -q "7_mathematics\|math"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,category: mathematics"
fi

# Type detection based on title and body
COMBINED_TEXT=$(echo "$PR_TITLE $PR_BODY" | tr '[:upper:]' '[:lower:]')

if echo "$COMBINED_TEXT" | grep -q "fix\|bug\|correct"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,bug"
elif echo "$COMBINED_TEXT" | grep -q "add\|new\|solution"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,enhancement"
elif echo "$COMBINED_TEXT" | grep -q "doc\|readme\|comment"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,documentation"
fi

# Difficulty detection
if echo "$COMBINED_TEXT" | grep -q "easy\|simple\|basic"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,easy"
    if ! echo "$LABELS_TO_ADD" | grep -q "good first issue"; then
        LABELS_TO_ADD="$LABELS_TO_ADD,good first issue"
    fi
elif echo "$COMBINED_TEXT" | grep -q "hard\|difficult\|complex"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,hard,help wanted"
elif echo "$COMBINED_TEXT" | grep -q "medium\|intermediate"; then
    LABELS_TO_ADD="$LABELS_TO_ADD,medium"
fi

# Remove duplicates and clean up
LABELS_CLEANED=$(echo "$LABELS_TO_ADD" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')

echo "üè∑Ô∏è  Labels to add: $LABELS_CLEANED"

# Add labels
echo "üîÑ Adding labels..."
gh pr edit $PR_NUMBER --add-label "$LABELS_CLEANED"

# Check if this is a first-time contributor
echo "üë§ Checking contribution history..."
TOTAL_PRS=$(gh pr list --author "$PR_AUTHOR" --state all | wc -l)

# Create appropriate comment
if [ "$TOTAL_PRS" -eq 1 ]; then
    COMMENT_TYPE="first-time"
else
    COMMENT_TYPE="returning"
fi

# Generate comment
COMMENT_FILE=$(mktemp)

if [ "$COMMENT_TYPE" = "first-time" ]; then
    cat > "$COMMENT_FILE" << EOF
## üéâ Welcome to MyCSES, @$PR_AUTHOR!

Thank you for your first contribution to our competitive programming solutions repository!

### üìä PR Analysis (Manual Processing)
- **Labels Applied**: \`$(echo "$LABELS_CLEANED" | sed 's/,/\`, \`/g')\`
- **Files Changed**: $(echo "$FILES" | wc -w)
- **Status**: Processed manually by maintainer

### üéÉ Hacktoberfest Information
This PR has been labeled for Hacktoberfest participation! üéâ

### üìã Next Steps
1. Ensure your solution passes all CSES test cases
2. Wait for maintainer review
3. Address any requested changes
4. Once approved and merged, you'll get the \`hacktoberfest-accepted\` label!

### üìö Resources
- [Contributing Guidelines](https://github.com/$REPO_OWNER/$REPO_NAME/blob/main/CONTRIBUTING.md)
- [Code of Conduct](https://github.com/$REPO_OWNER/$REPO_NAME/blob/main/CODE_OF_CONDUCT.md)

Thank you for contributing to the competitive programming community! üöÄ

---
*This message was generated by manual automation processing.*
EOF
else
    cat > "$COMMENT_FILE" << EOF
## üöÄ Thank you for contributing, @$PR_AUTHOR!

### üìä PR Analysis (Manual Processing)
- **Labels Applied**: \`$(echo "$LABELS_CLEANED" | sed 's/,/\`, \`/g')\`
- **Files Changed**: $(echo "$FILES" | wc -w)
- **Status**: Processed manually by maintainer

### üéÉ Hacktoberfest Information
This PR has been labeled for Hacktoberfest participation! üéâ

### üìã Next Steps
1. Ensure your solution passes all CSES test cases
2. Wait for maintainer review
3. Address any requested changes
4. Once approved and merged, you'll get the \`hacktoberfest-accepted\` label!

Thank you for your continued contributions! üåü

---
*This message was generated by manual automation processing.*
EOF
fi

# Post comment
echo "üí¨ Posting welcome comment..."
gh pr comment $PR_NUMBER --body-file "$COMMENT_FILE"

# Clean up
rm "$COMMENT_FILE"

echo "‚úÖ Manual automation completed for PR #$PR_NUMBER!"
echo ""
echo "üìã Summary:"
echo "   - Labels added: $LABELS_CLEANED"
echo "   - Comment posted: $COMMENT_TYPE contributor message"
echo "   - Files processed: $(echo "$FILES" | wc -w)"
echo ""
echo "üîç You can view the PR at:"
echo "   https://github.com/$REPO_OWNER/$REPO_NAME/pull/$PR_NUMBER"